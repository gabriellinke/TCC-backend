spring.application.name=tcc

# Configuring to fix an error (https://stackoverflow.com/questions/60301008/failed-to-validate-connection-this-connection-has-been-closed-possibly-consi)
spring.datasource.hikari.maximumPoolSize=20
spring.datasource.hikari.maxLifetime=60000

spring.servlet.multipart.max-file-size=50MB
spring.servlet.multipart.max-request-size=50MB

##JPA Config
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=none
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=true

# Need to set these variables in the .env
ocr.server.endpoint=
# Credenciais pra acessar o bucket
aws.credentials.access-key=
aws.credentials.secret-key=
aws.s3.bucket.name=gabriellinke-tcc
aws.s3.bucket.url=https://gabriellinke-tcc.s3.us-east-1.amazonaws.com/
## connect to database

spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driver-class-name=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=

#server.ssl.key-store= keystore.p12
#server.ssl.key-store-password= gabriel12
#server.ssl.key-store-type= pkcs12
#server.ssl.key-alias= springboot
#server.ssl.key-password= gabriel12
#server.port= 8443

# configuration needed for validating JWT token against our Keycloak server
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8001/realms/tcc-realm

# Since JWT is signed and we need to verify its signature, we set the jwk-set-uri property to a Keycloak endpoint with
# the required data for JWT signature verification.
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://localhost:8001/realms/tcc-realm/protocol/openid-connect/certs